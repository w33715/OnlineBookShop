<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp">

    <Style x:Key="menuButton" TargetType="RadioButton">
        <!-- normal button style -->
        <Setter Property="Height" Value="40"/>
        <Setter Property="Margin" Value="-5,0,0,5"/>
        
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource plainTextColor3}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="0 0 0 2"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- Button Style on hover -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{StaticResource panelOverColor}"/>
                <Setter Property="Foreground" Value="{StaticResource titlecolor3}"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
            <!-- Active button back color -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{StaticResource panelActiveColor}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag,RelativeSource={RelativeSource Self}}"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Cursor" Value="Arrow" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- menu button icon -->
    <Style x:Key="menuButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Tag,RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="35,0,20,0"/>
        
    </Style>
    
    
    
    <!-- Menu button text -->
    <Style x:Key="menuButtonText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="13.5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    
    <!-- Control bar button -->
    <Style x:Key="controlButton" TargetType="Button">
        <!-- normal button style -->
    <Setter Property="Width" Value="35"/>
    
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Foreground" Value="{StaticResource plainTextColor3}"/>
   
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="Button">
                <Border Background="{TemplateBinding Background}"
                        CornerRadius="4"
                           BorderBrush="{TemplateBinding BorderBrush}">
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Border>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <!-- Button Style on hover -->
    <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
            
            <Setter Property="Background" Value="{StaticResource panelActiveColor}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag,RelativeSource={RelativeSource Self}}"/>
           
        </Trigger>
       
    </Style.Triggers>
    </Style>
    <!-- menu button icon -->
    <Style x:Key="controlButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground,RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="9"/>
        <Setter Property="Height" Value="9"/>  
    </Style>

    <!-- Icon button -->
    <Style x:Key="iconButton" TargetType="Button">
        <!-- normal button style -->
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="25"/>

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource plainTextColor1}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                         BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- Button Style on hover -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">

               
                <Setter Property="Foreground" Value="{Binding Path=Tag,RelativeSource={RelativeSource Self}}"/>

            </Trigger>

        </Style.Triggers>
    </Style>
    <!-- menu button icon -->
    <Style x:Key="iconButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground,RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
    </Style>
    <!-- normal button style -->

    <Style x:Key="normalButton" TargetType="Button">
        <!-- normal button style -->
       
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource  titlecolor3}"/>
        <Setter Property="BorderBrush" Value="#FFFFFF"/>
        <Setter Property="BorderThickness" Value="2,2,2,2"/>
        <Setter Property="Cursor" Value="Hand"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                        CornerRadius="4"
                           BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- Button Style on hover -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">

                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{StaticResource  titlecolor1}"/>

            </Trigger>

        </Style.Triggers>
    </Style>
    <Style x:Key="normalToggleButton" TargetType="ToggleButton">
        <!-- normal button style -->

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource  titlecolor3}"/>
        <Setter Property="BorderBrush" Value="#FFFFFF"/>
        <Setter Property="BorderThickness" Value="2,2,2,2"/>
        <Setter Property="Cursor" Value="Hand"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"
                        CornerRadius="4"
                           BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- Button Style on hover -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">

                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{StaticResource  titlecolor1}"/>

            </Trigger>

        </Style.Triggers>
    </Style>
    <!--#region Ribbon ToggleButton Style -->
    <ImageBrush x:Key="filterOn" ImageSource="G:\Daten\X Programmdateien\Entwicklung\CSharp\GISKommunikation\GISKommunikation\Icons\green_button.png"/>
    <ImageBrush x:Key="filterOff" ImageSource="G:\Daten\X Programmdateien\Entwicklung\CSharp\GISKommunikation\GISKommunikation\Icons\red_button.png"/>
    <Style x:Key="FilterButtonStyle" TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
                    <Border x:Name="border"
                            BorderThickness="0"
                            Background="{StaticResource filterOff}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource filterOff}"/>

                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource filterOn}"/>

                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource filterOff}"/>

                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>




    </Style>
    

</ResourceDictionary>